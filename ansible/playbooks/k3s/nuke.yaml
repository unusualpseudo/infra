---
- name: K3s Cluster Nuke
  hosts:
    - master
    - worker
  any_errors_fatal: true
  become: true
  gather_facts: true

  vars_prompt:
    - name: nuke
      prompt: |-
        /!\  Are you sure you want to nuke this k3s cluster?          /!\
        /!\    1. Ensure you have backed up all important data / DBs  /!\
        /!\    2. This will delete all data and cluster state!!!      /!\
        Type CONFIRM to proceed
      default: "n"
      private: false

  pre_tasks:
    - name: Check for confirmation
      ansible.builtin.fail:
        msg: Aborted nuking the cluster
      when: nuke != 'CONFIRM'

    - name: Pausing for 5 seconds...
      ansible.builtin.pause:
        seconds: 5

  tasks:
    - name: Stop scheduling pods
      ignore_errors: true
      block:
        - name: Cordon
          kubernetes.core.k8s_drain:
            name: "{{ inventory_hostname }}"
            kubeconfig: /etc/rancher/k3s/k3s.yaml
            state: cordon #unschedulable
          delegate_to: "{{ groups['controller'][0] }}"

    - name: Drain nodes
      kubernetes.core.k8s_drain:
        name: "{{ inventory_hostname }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: drain
        delete_options:
          delete_emptydir_data: true
          ignore_daemonsets: true
          terminate_grace_period: 60
          wait_timeout: 90
        pod_selectors:
      delegate_to: "{{ groups['controller'][0] }}"

    - name: Stop k3s
      ansible.builtin.include_role:
        name: xanmanning.k3s
        public: true
      vars:
        k3s_state: stopped

    - name: Networking | Delete CNI directory
      ansible.builtin.file:
        path: /etc/cni/net.d
        state: absent

    - name: Networking | Flush iptables
      ansible.builtin.iptables:
        table: "{{ item }}"
        flush: true
      loop: ["filter", "nat", "mangle", "raw"]

    - name: Networking | Flush ip6tables
      ansible.builtin.iptables:
        table: "{{ item }}"
        flush: true
        ip_version: ipv6
      loop: ["filter", "nat", "mangle", "raw"]

    - name: Check to see if k3s-killall.sh exits
      ansible.builtin.stat:
        path: /usr/local/bin/k3s-killall.sh
      register: check_k3s_killall_script

    - name: Check to see if k3s-uninstall.sh exits
      ansible.builtin.stat:
        path: /usr/local/bin/k3s-uninstall.sh
      register: check_k3s_uninstall_script

    - name: Run k3s-killall.sh
      when: check_k3s_killall_script.stat.exists
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-killall.sh
      register: k3s_killall
      changed_when: k3s_killall.rc == 0

    - name: Run k3s-uninstall.sh
      when: check_k3s_uninstall_script.stat.exists
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-uninstall.sh
      args:
        removes: /usr/local/bin/k3s-uninstall.sh
      register: k3s_uninstall
      changed_when: k3s_uninstall.rc == 0

    - name: Ensure hard links are removed
      when:
        - k3s_install_hard_links
        - not ansible_check_mode
      ansible.builtin.file:
        path: "{{ k3s_install_dir }}/{{ item }}"
        state: absent
      loop: ["kubectl", "crictl", "ctr"]

    - name: Wipe longhorn data folder
      ansible.builtin.file:
        path: "{{ longhorn_data_folder }}"
        state: absent
      when: longhorn_data_folder is defined

    - name: Stale Containers
      ansible.builtin.include_tasks: tasks/stale_containers.yaml
      vars:
        stale_containers_state: disabled

    - name: Reboot
      ansible.builtin.reboot:
        msg: Rebooting nodes
        reboot_timeout: 3600
